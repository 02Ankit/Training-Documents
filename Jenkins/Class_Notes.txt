########################
Day 5 - 22nd Mar. 2024
########################		
		
Jenkins ::::
		
	- Build Orchestration tool :::
	- CICD Pipelines :::
		
			Using DevOps Approach::
			
				- Create Source Code 
				- Save/Commit the Source Code in a Source Repository.
				
			Automate the process using DevOps Tools :
				- Build Application - 
					- Build - Is a process of compiling the source code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll)
				- Perform Unit Testing 
				- Promote the code to higher environments (QA / UAT / Prod)
				- Notify the Testing team thru emails 
		
		
		Jenkins is a build orchestration Tool :
			- Used to create end-to-end CICD Pipeline 
			
		
		Jenkins Architecture :
			-	Master/Slave Architecture
				
				VM - Jenkins 
				Jenkins_master 	--> Tools : jdk, jenkins, maven/gradle, python, .netcore,nodejs  
				
				Jenkins_Master (VM)	--> jdk, jenkins				
								==> Used to create the Jenkins CICD pipeline project and schedule it to run in slave nodes.
					Jenkins_Slave1 (VM) --> git, jdk, maven 
					Jenkins_Slave2 (VM) --> git, python
					Jenkins_Slave2.1 (VM) --> git, python
					Jenkins_Slave3 (VM) --> git, .netcore
					Jenkins_Slave4 (VM) --> git, Angualar/NodeJS
					
		
		Jenkins:
		
			Developers' Perspective 
				- Consumers of Jenkins 
				
			DevOps Perspective ::
				- Own the Jenkins Architecture:
				
			
		DevOps Roles/Responsibilites in Jenkins :
		
		Cloud Account 
		
			Azure-AWS Cloud Platform ;
				Free tier account 



#######################
Day 6 - 25th Mar. 2024
#######################	


		DevOps Perspective ::
			- Own the Jenkins Architecture
			- Jenkins Administrator!
				
		DevOps Roles/Responsibilites in Jenkins :
		
			- Installation of Jenkins 
			- Plugins Management 
			- User Managements
			- Security Management
			- Tools Management 
			- Jenkins System Configurations
			- Configure and Manage Jenkins Master & Slave Nodes 
			- Create CICD Pipeline Projects/Jobs 
			- Onboard the Application to Jenkins CICD Process 
			- Trouble-shoot the issues 
			- Periodic Upgrade of Jenkins and Plugins
			- Back-Up & Restoration
			
		- Installation of Jenkins :
		
		Infra-Structure :
		
		AWS Cloud Platform 
		
		1. Create a AWS free-Tier Account - https://aws.amazon.com/console/
		2. Create AWS EC2 Instances(Virtual Machine)
				Linux Ubuntu v20.04
		3. Connect to EC2 Instance 
			- EC2 Instance Connect 
			- SSH Agent in the Local Machine 
				- MobaXterm  -> https://mobaxterm.mobatek.net/download.html
				- Putty
			- Terminal to connect
		4. Login to EC2 Instance 
		5. Installation of required Tools!
		
		Linux Machines :
		
			Linux Distributions:
				- Debian/Ubuntu	- apt / apt-get 
				- Centos/RHEL 	- yum
				- Fedora		- dnf 	
				- Amazon Linux  - dnf / yum
				
			Package Manager:
				- Used to Manage the Linux Application Packages			
				
			- Linux Ubuntu v20.04
		
		AWS Regions 
			Availability Zones / Data Center 
				- Servers 
					- VMs 
			
			1 VM --> 750 Hrs/Month 
			
			10 VMs --> 75 Hrs/Month 
			
		AWS EC2 Instance should be stopped if not in use	
			
		Install Jenkins: https://www.jenkins.io/doc/book/installing/ 
			Set Jenkins to listen on port 8080
			
				Update the Inbound Rule with port 8080.
				
			
		Jenkins_Master_Node(VM) - Install Jenkins 

		Installation & Configuration of Jenkins :::
		
			AWS Cloud Platform :::
			
				Launch Ubuntu 20.04 (VM)
						Install - git, jdk, jenkins 
				Jenkins can be accessed using web browser!
					open the default Jenkins port - 8080
		
			
		https://www.jenkins.io/doc/book/installing/	

Installation procedures :::

	1. Install the pre-requisites 
	2. Install the Actual tool 
	3. Perform Post_Installation Activities
	
It is always recommended to use the official documentation to do the package management


Install & Configure Jenkins Server :

	- Refer to that tools/Service's Official Documentation.
				https://www.jenkins.io/doc/book/installing/linux/

1. Install the pre-requisites :::

# Install Jdk:

sudo -i 			
sudo apt update -y
sudo apt install openjdk-11-jre -y 						# previous version
java -version						

2. Install the Actual tool :::
 								
#Install Jenkins:

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update

sudo apt-get install jenkins -y

systemctl enable jenkins 
systemctl status jenkins 
systemctl start jenkins 
systemctl stop jenkins 
systemctl restart jenkins 



3. Perform Post_Installation Activities :::

jenkins --version 

systemctl status jenkins 

Open web browser :

http://<Public_IP_Address>:8080/

E.g.: http://13.201.70.24:8080/

cat /var/lib/jenkins/secrets/initialAdminPassword			
			
					
	-	Plugins Management
		
			https://plugins.jenkins.io/docker-plugin/

Summary :			
			- Installation of Jenkins 
			- Plugins Management 
			- User Managements
			- Security Management
			- Tools Management 
			- Jenkins System Configurations

#######################
Day 7 - 26th Mar. 2024
#######################		


	- Create Jenkins Jobs/Project
	
		- Free-Style Projects 
			- Manual config
			
			Variables :
			
				- Environment Variables 	- Jenkins reserved key-words
				
					"${var_name}"
				
				- User Defined Variables 
					
					x = 5;
		
		- Pipeline Projects
			- The Task definitions are done through groovy script
			- It can be reusable 
			
		Pipeline :
		
			Stages {
				stage1
				{
					step1
					step2
				}
				stage1
				{
					step1
					step2
				}
				}
				
		CI-CD 
		
		-> SCM-Checkout
		-> Application Build 
		-> Deploy to Target_Environment
		
			Jenkins Pipelines :
				- Scripted Pipelines - Core Groovy Scripting Knowledge is required
					- 
				
				- Declarative Pipelines
					- Snippet Generator 
					- It is easy to write & maintain/ Enhance
		
		
		gitlab-ci 			Declarative Scripting Language - *.yaml
		az_pipeline
		aws_code_pipeline

pipeline {
    agent any

    stages {
        stage('SCM-Checkout') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Application-Build ') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy to Test-Environment') {
            steps {
                echo 'Hello World'
            }
        }
    }
}

		Jenkins Architecture :
			-	Master/Slave Architecture
				
				VM - Jenkins 
				Jenkins_master 	--> Tools : jdk, jenkins, maven/gradle, python, .netcore,nodejs  
				
				Jenkins_Master (VM)	--> jdk, jenkins				
								==> Used to create the Jenkins CICD pipeline project and schedule it to run in slave nodes.
					Jenkins_Slave1 (VM) --> git, jdk, maven 			# Is a Build Environment
								==> Used to perform Build/Unit Testing and Create Artifacts

				QA_Server (VM) 
				
				UAT_Server (VM) 
				
				Prod_Server (VM)
				
		Non-Prod 
		
			Dev 	
			Build 
			Test-Environment	
				QA 
				UAT 
	
		SSH Connection:
		
			host_name
			user_name
			User_credentials 
				Authentication Methods:
					- Password based Authentication
					- Key based Authentication
						- Private & Public Key 
					- Token based Authentication
					- Passwordless Authentication
				

	
Configuration of Jenkins Master & Slave Node:

Ubuntu 20.04 --> Tools git, jdk, maven
Integrate Jenkins_Slave with Master

		Create and Configure Jenkins Slave Node ::::
		
		
				Jenkins_Master(VM) 				Tools: git, jdk, jenkins 
					Jenkins_Slave_Node1(VM)		Tools: git, jdk, maven
				Through SSH, connect the Jenkins Master & Slave Nodes
		
		
		
#Configure Slave Node1 for Java Maven App. :
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Launch an Ubuntu v20.04 Machine : 

sudo -i

apt update -y 

Install Java ::

sudo apt update -y 
sudo apt install openjdk-11-jre -y
java -version

Install GIT :

sudo apt install git -y

Install Maven - Build Tool :
https://maven.apache.org/install.html

sudo apt install maven -y 


Create User in Jenkins Slave Machine & Create SSH Keys 

	SSH Keys --> is composed of public and private keys 


#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 2048 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh


In Jenkins Master - Add Node Configuration
		
		Goto Manage Jenkins - Add New Node Configuration
		
		Create Application Build using Maven in Slave Node 
		
pipeline {
    agent { label 'JSlave_Node1' }

    stages {
        stage('SCM-Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
				
            }
        }
        stage('Application-Build ') {
            steps {
                echo 'Hello World'
                sh 'mvn test'
            }
        }
        stage('Deploy to Test-Environment') {
            steps {
                echo 'Hello World'
            }
        }
    }
}


	Maven Build Tools :
	
		- pom.xml ==	Used to define the dependencies and plugins 
		
		- maven goal ==	Is the actual task to perform using maven 
			- clean -- Used to clean-up the target folder
			- compile -- Just Compile the code 
			- test 		-- Compile and perform unit testing 
			- package   -- Compile, perform unit testing and create artifacts ( *.war)
							Created in a target folder within workspace
